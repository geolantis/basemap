name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  NODE_VERSION: '20'
  WORKING_DIR: ./map-config-service/web

jobs:
  # Quality checks and tests
  test:
    name: üß™ Test & Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üîç Type checking
      run: npm run build:check
      continue-on-error: true

    - name: üßπ Lint code
      run: |
        # Run linting if script exists
        if npm run | grep -q "lint"; then
          npm run lint
        else
          echo "No lint script found, skipping..."
        fi

    - name: üß™ Run tests
      run: npm run test:run
      continue-on-error: true

    - name: üìä Generate test coverage
      run: npm run test:coverage
      continue-on-error: true

    - name: üìã Security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

  # Build and verify application
  build:
    name: üèóÔ∏è Build Application
    runs-on: ubuntu-latest
    needs: test
    if: always()
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üèóÔ∏è Build application
      run: npm run build:prod || npm run build || npm run build --mode production
      env:
        NODE_ENV: production

    - name: üì¶ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: ${{ env.WORKING_DIR }}/dist/
        retention-days: 7

  # Security scanning
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîç Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: üìä Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Create release tag on successful main branch builds
  release:
    name: üè∑Ô∏è Create Release Tag
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üè∑Ô∏è Create release tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Generate version based on date and commit
        VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"

        # Check if tag already exists
        if git rev-parse "$VERSION" >/dev/null 2>&1; then
          echo "Tag $VERSION already exists, skipping..."
        else
          git tag -a $VERSION -m "Release $VERSION"
          git push origin $VERSION
          echo "‚úÖ Created release tag: $VERSION"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary notification
  summary:
    name: üìä CI Summary
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: always()

    steps:
    - name: üìä CI Pipeline Summary
      run: |
        echo "## CI Pipeline Summary"
        echo ""
        echo "### Build Status"
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "‚úÖ Build: Successful"
        else
          echo "‚ùå Build: Failed"
        fi

        echo ""
        echo "### Test Results"
        if [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "‚úÖ Tests: Passed"
        else
          echo "‚ö†Ô∏è Tests: Failed (non-blocking)"
        fi

        echo ""
        echo "### Security Scan"
        if [[ "${{ needs.security.result }}" == "success" ]]; then
          echo "‚úÖ Security: No critical issues"
        else
          echo "‚ö†Ô∏è Security: Review required"
        fi

        echo ""
        echo "### Deployment"
        echo "üöÄ Deployment handled automatically by Vercel"
        echo "üìç Production URL: https://mapconfig.geolantis.com"

        echo ""
        echo "---"
        echo "*Timestamp: $(date +'%Y-%m-%d %H:%M:%S UTC')*"